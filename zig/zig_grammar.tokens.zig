// AutoGenerated file

pub const Token = struct {
    id: Id,
    start: usize,
    end: usize,
    line: ?*@This() = null,
};

pub const Id = enum(u8) {
    Invalid = 0,
    Eof = 1,
    MinusEqual = 31,
    Slash = 63,
    Keyword_continue = 74,
    Keyword_promise = 79,
    Keyword_suspend = 23,
    RBracket = 82,
    Keyword_null = 94,
    Keyword_switch = 104,
    EqualEqual = 46,
    Tilde = 68,
    BangEqual = 47,
    LParen = 16,
    MinusPercent = 61,
    Asterisk = 62,
    Comma = 4,
    Keyword_fn = 15,
    Keyword_const = 21,
    AngleBracketAngleBracketRightEqual = 33,
    AsteriskAsterisk = 65,
    Keyword_cancel = 72,
    Keyword_or = 44,
    CaretEqual = 35,
    DocComment = 2,
    QuestionMark = 78,
    FloatLiteral = 88,
    Keyword_error = 91,
    Keyword_defer = 24,
    RBrace = 77,
    Keyword_true = 93,
    Keyword_await = 70,
    Ellipsis2 = 98,
    PeriodAsterisk = 99,
    Keyword_if = 110,
    LCurly = 76,
    Keyword_unreachable = 96,
    EqualAngleBracketRight = 113,
    Bang = 18,
    Identifier = 22,
    Keyword_noalias = 119,
    LineString = 120,
    Keyword_try = 69,
    Ellipsis3 = 109,
    StringLiteral = 6,
    Keyword_export = 10,
    AngleBracketAngleBracketLeftEqual = 32,
    MinusAngleBracketRight = 80,
    Keyword_stdcallcc = 108,
    Keyword_while = 112,
    Semicolon = 8,
    Keyword_comptime = 7,
    AsteriskEqual = 27,
    Recovery = 41,
    AngleBracketLeftEqual = 50,
    Keyword_orelse = 42,
    LBrace = 85,
    BracketStarBracket = 83,
    PipeEqual = 36,
    IntegerLiteral = 89,
    Keyword_enum = 101,
    PlusEqual = 30,
    Builtin = 97,
    Keyword_union = 102,
    Caret = 53,
    Keyword_asm = 105,
    Keyword_inline = 11,
    Keyword_struct = 116,
    Colon = 86,
    PlusPercent = 60,
    Keyword_else = 26,
    PlusPercentEqual = 38,
    AngleBracketRight = 49,
    Minus = 58,
    Keyword_extern = 9,
    Keyword_test = 5,
    AngleBracketLeft = 48,
    CharLiteral = 87,
    Pipe = 52,
    Keyword_use = 13,
    Keyword_false = 92,
    Keyword_packed = 103,
    MinusPercentEqual = 39,
    RParen = 17,
    Keyword_var = 19,
    AsteriskPercentEqual = 37,
    Keyword_return = 75,
    LBracket = 81,
    PeriodQuestionMark = 100,
    Plus = 57,
    Keyword_volatile = 114,
    Period = 90,
    Keyword_allowzero = 115,
    PercentEqual = 29,
    Keyword_linksection = 106,
    RootDocComment = 3,
    Keyword_and = 45,
    Keyword_pub = 118,
    Keyword_nakedcc = 107,
    Percent = 64,
    Keyword_align = 117,
    Keyword_usingnamespace = 12,
    AngleBracketAngleBracketRight = 56,
    AsteriskPercent = 66,
    Keyword_undefined = 95,
    Equal = 40,
    SlashEqual = 28,
    Keyword_for = 111,
    PipePipe = 67,
    BracketStarCBracket = 84,
    Keyword_threadlocal = 14,
    LineCString = 121,
    Keyword_resume = 71,
    AngleBracketRightEqual = 51,
    Keyword_errdefer = 25,
    Keyword_async = 20,
    AmpersandEqual = 34,
    Keyword_catch = 43,
    Ampersand = 54,
    AngleBracketAngleBracketLeft = 55,
    PlusPlus = 59,
    Keyword_break = 73,
    ShebangLine = 122,
    LineComment = 123,
    Newline = 124,
    Ignore = 125,
};

pub const TerminalId = enum(u8) {
    Accept = 0,
    Expr = 29,
    ContainerDeclOp = 62,
    MaybeExpr = 77,
    AsmOutputItem = 39,
    IfPrefix = 48,
    DocCommentLines = 3,
    MaybeContainerMembers = 6,
    SwitchProng = 54,
    MaybeAlign = 64,
    MaybeConst = 82,
    MultilineStringLiteral = 83,
    ContainerField = 16,
    Statement = 19,
    ParamType = 47,
    BlockLabel = 32,
    TopLevelComptime = 10,
    ContainerMembers = 7,
    MaybeNoalias = 78,
    ContainerDecl = 33,
    MaybeLinkSection = 44,
    TestDecl = 9,
    BreakLabel = 43,
    SwitchCase = 55,
    MaybeExprList = 72,
    MultilineCStringLiteral = 84,
    BlockExpr = 30,
    AsmExpr = 37,
    BlockExprStatement = 26,
    WhilePrefix = 50,
    MaybeByteAlign = 63,
    ParamDeclList = 71,
    ErrorTagList = 65,
    FnProto = 13,
    SwitchItems = 56,
    AsmOutputList = 67,
    MaybeFnCC = 45,
    Block = 31,
    ContainerMember = 8,
    SwitchExpr = 35,
    ContainerDeclTypeEnum = 60,
    MaybeIdentifier = 80,
    Statements = 18,
    MaybePtrPayload = 52,
    ContainerDeclTypeType = 61,
    MaybeColonTypeExpr = 76,
    SwitchProngList = 66,
    MaybeVolatile = 58,
    MaybeAllowzero = 59,
    MaybeEqualExpr = 28,
    ForPrefix = 49,
    PtrIndexPayload = 53,
    MaybePub = 75,
    MaybeDocComment = 2,
    LabeledStatement = 22,
    RootDocCommentLines = 5,
    IfStatement = 20,
    MaybePayload = 51,
    MaybeThreadlocal = 12,
    ForStatement = 23,
    AsmInputList = 68,
    ElseNoPayloadStatement = 24,
    MaybeInline = 79,
    WhileStatement = 25,
    MaybeRootDocComment = 4,
    ElseStatement = 21,
    TopLevelDecl = 11,
    AsmInput = 40,
    VarDecl = 15,
    MaybeStatements = 17,
    Root = 1,
    AssignExpr = 27,
    MaybeExternPacked = 34,
    String = 36,
    InitList = 74,
    AsmClobber = 42,
    StringList = 69,
    ExprList = 73,
    AsmInputItem = 41,
    MaybeComma = 81,
    ParamDecl = 46,
    SwitchItem = 57,
    AsmOutput = 38,
    AsyncPrefix = 14,
    MaybeParamDeclList = 70,
};

pub fn terminalIdToString(id: TerminalId) []const u8 {
    switch (id) {
        .Accept => return "$accept",
        .Expr => return "Expr",
        .ContainerDeclOp => return "ContainerDeclOp",
        .MaybeExpr => return "Expr?",
        .AsmOutputItem => return "AsmOutputItem",
        .IfPrefix => return "IfPrefix",
        .DocCommentLines => return "DocCommentLines",
        .MaybeContainerMembers => return "ContainerMembers?",
        .SwitchProng => return "SwitchProng",
        .MaybeAlign => return "Align?",
        .MaybeConst => return "Const?",
        .MultilineStringLiteral => return "MultilineStringLiteral",
        .ContainerField => return "ContainerField",
        .Statement => return "Statement",
        .ParamType => return "ParamType",
        .BlockLabel => return "BlockLabel",
        .TopLevelComptime => return "TopLevelComptime",
        .ContainerMembers => return "ContainerMembers",
        .MaybeNoalias => return "Noalias?",
        .ContainerDecl => return "ContainerDecl",
        .MaybeLinkSection => return "LinkSection?",
        .TestDecl => return "TestDecl",
        .BreakLabel => return "BreakLabel",
        .SwitchCase => return "SwitchCase",
        .MaybeExprList => return "ExprList?",
        .MultilineCStringLiteral => return "MultilineCStringLiteral",
        .BlockExpr => return "BlockExpr",
        .AsmExpr => return "AsmExpr",
        .BlockExprStatement => return "BlockExprStatement",
        .WhilePrefix => return "WhilePrefix",
        .MaybeByteAlign => return "ByteAlign?",
        .ParamDeclList => return "ParamDeclList",
        .ErrorTagList => return "ErrorTagList",
        .FnProto => return "FnProto",
        .SwitchItems => return "SwitchItems",
        .AsmOutputList => return "AsmOutputList",
        .MaybeFnCC => return "FnCC?",
        .Block => return "Block",
        .ContainerMember => return "ContainerMember",
        .SwitchExpr => return "SwitchExpr",
        .ContainerDeclTypeEnum => return "ContainerDeclTypeEnum",
        .MaybeIdentifier => return "Identifier?",
        .Statements => return "Statements",
        .MaybePtrPayload => return "PtrPayload?",
        .ContainerDeclTypeType => return "ContainerDeclTypeType",
        .MaybeColonTypeExpr => return "ColonTypeExpr?",
        .SwitchProngList => return "SwitchProngList",
        .MaybeVolatile => return "Volatile?",
        .MaybeAllowzero => return "Allowzero?",
        .MaybeEqualExpr => return "EqualExpr?",
        .ForPrefix => return "ForPrefix",
        .PtrIndexPayload => return "PtrIndexPayload",
        .MaybePub => return "Pub?",
        .MaybeDocComment => return "DocComment?",
        .LabeledStatement => return "LabeledStatement",
        .RootDocCommentLines => return "RootDocCommentLines",
        .IfStatement => return "IfStatement",
        .MaybePayload => return "Payload?",
        .MaybeThreadlocal => return "Threadlocal?",
        .ForStatement => return "ForStatement",
        .AsmInputList => return "AsmInputList",
        .ElseNoPayloadStatement => return "ElseNoPayloadStatement",
        .MaybeInline => return "Inline?",
        .WhileStatement => return "WhileStatement",
        .MaybeRootDocComment => return "RootDocComment?",
        .ElseStatement => return "ElseStatement",
        .TopLevelDecl => return "TopLevelDecl",
        .AsmInput => return "AsmInput",
        .VarDecl => return "VarDecl",
        .MaybeStatements => return "Statements?",
        .Root => return "Root",
        .AssignExpr => return "AssignExpr",
        .MaybeExternPacked => return "ExternPacked?",
        .String => return "String",
        .InitList => return "InitList",
        .AsmClobber => return "AsmClobber",
        .StringList => return "StringList",
        .ExprList => return "ExprList",
        .AsmInputItem => return "AsmInputItem",
        .MaybeComma => return "Comma?",
        .ParamDecl => return "ParamDecl",
        .SwitchItem => return "SwitchItem",
        .AsmOutput => return "AsmOutput",
        .AsyncPrefix => return "AsyncPrefix",
        .MaybeParamDeclList => return "ParamDeclList?",
    }
}
